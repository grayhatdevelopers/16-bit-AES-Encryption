// AESEncryption.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <bitset>

#include "Encrypt.h"
int main()
{
    std::cout << "Hello World!\n";
	int a = 0x63;
	std::bitset<8> x(a);
	std::cout << "decimal = " << a << std::endl;
	std::cout << "binary = " << x << std::endl;
	std::cout << "Least significant bit = " << ((a >> 0) & 1) << std::endl;
	std::cout << "Most significant bit = " << ((a >> 7) & 1) << std::endl;

	std::cout << "Let's check again, just in case..." << std::endl;

	x = a;
	std::cout << "decimal = " << a << std::endl;
	std::cout << "binary = " << x << std::endl;
	std::cout << "Least significant bit = " << ((a >> 0) & 1) << std::endl;
	std::cout << "Most significant bit = " << ((a >> 7) & 1) << std::endl;

	std::cout << "Now let's left shift by 1 bit..." << std::endl;
	x = a;
	std::cout << "Before = " << x << std::endl;
	a = (a << 1);
	x=a;
	std::cout << "After = " << x << std::endl;


	std::cout << std::endl;
	cout << "0x63 with 2.." << endl;
	std::bitset<8> y(RijndaelMultiplication(0x63, 02));
	std::cout << "After multiplication: ";
	std::cout << y << std::endl;

	std::cout << std::endl;
	cout << "2F with 3.." << endl;
	char lumber;
	lumber = RijndaelMultiplication(0x2F, 02);

	lumber ^= (0x2F);
	y = lumber;

	std::cout << "After multiplication: ";
	std::cout << y << std::endl;

	
	unsigned char state[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};

	std::cout << "Original state = {";
	Display(state);
	std::cout << "}" << std::endl;
	char option;
	std::cin >> option;
	MixColumn(state);

	std::cout << "My answer = {";
	Display(state);
	std::cout << "}" << std::endl;


	unsigned char expected[16] = {
		0xba, 0x84, 0xe8, 0x1b,
		0x75, 0xa4, 0x8d, 0x40,
		0xf4, 0x8d, 0x06, 0x7d,
		0x7a, 0x32, 0x0e, 0x5d
	};

	std::cout << "Their answer = {";
	Display(expected);
	std::cout << "}" << std::endl;


	cout << "Inverse mixColumns Test" << endl;
	unsigned char state1[16] = {
	0xba, 0x84, 0xe8, 0x1b,
	0x75, 0xa4, 0x8d, 0x40,
	0xf4, 0x8d, 0x06, 0x7d,
	0x7a, 0x32, 0x0e, 0x5d
	};
	std::cout << "Original state = {";
	Display(state1);
	std::cout << "}" << std::endl;

	InvMixColumn(state1);

	std::cout << "My answer = {";
	Display(state1);
	std::cout << "}" << std::endl;

	unsigned char expected1[16] = {
		0x63, 0xeb, 0x9f, 0xa0,
		0x2f, 0x93, 0x92, 0xc0,
		0xaf, 0xc7, 0xab, 0x30,
		0xa2, 0x20, 0xcb, 0x2b
	};

	std::cout << "Their answer = {";
	Display(expected1);
	std::cout << "}" << std::endl;

	cin >> option;








	unsigned char key3[16] = {
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00
	};

	std::cout << "Original state = {";
	Display(state1);
	std::cout << "}" << std::endl;

	unsigned char expandedKey3[176];
	KeyExpansion(key3, expandedKey3);

	std::cout << "My answer = {";
	Display(state1);
	std::cout << "}" << std::endl;
 

	unsigned char expected3[176] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63,
		0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa,
		0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99,
		0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b,
		0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90,
		0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7,
		0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b,
		0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f,
		0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41,
		0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e
	};


}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
